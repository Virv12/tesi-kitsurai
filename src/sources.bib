@misc{DynamoWhitepaper,
    author       = {{Amazon Web Services}},
    title        = {Choosing an AWS NoSQL Database},
    howpublished = {AWS Whitepaper},
    note         = {"Designed to provide single-digit millisecond latency for read and write operations at any scale."},
    url          = {https://docs.aws.amazon.com/whitepapers/latest/choosing-an-aws-nosql-database/amazon-dynamodb.html}
}

@inproceedings{Dynamo2007,
    author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
    title = {Dynamo: amazon's highly available key-value store},
    year = {2007},
    isbn = {9781595935915},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1294261.1294281},
    doi = {10.1145/1294261.1294281},
    abstract = {Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems.This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.},
    booktitle = {Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles},
    pages = {205–220},
    numpages = {16},
    keywords = {scalability, reliability, performance},
    location = {Stevenson, Washington, USA},
    series = {SOSP '07}
}

@inproceedings {Dynamo2022,
    author = {Mostafa Elhemali and Niall Gallagher and Nick Gordon and Joseph Idziorek and Richard Krog and Colin Lazier and Erben Mo and Akhilesh Mritunjai and Somasundaram Perianayagam and Tim Rath and Swami Sivasubramanian and James Christopher Sorenson III and Sroaj Sosothikul and Doug Terry and Akshat Vig},
    title = {Amazon {DynamoDB}: A Scalable, Predictably Performant, and Fully Managed {NoSQL} Database Service},
    booktitle = {2022 USENIX Annual Technical Conference (USENIX ATC 22)},
    year = {2022},
    isbn = {978-1-939133-29-46},
    address = {Carlsbad, CA},
    pages = {1037--1048},
    url = {https://www.usenix.org/conference/atc22/presentation/elhemali},
    publisher = {USENIX Association},
    month = jul
}

@misc{rfc9562,
    series =    {Request for Comments},
    number =    9562,
    howpublished =  {RFC 9562},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9562},
    url =       {https://www.rfc-editor.org/info/rfc9562},
    author =    {Kyzer R. Davis and Brad Peabody and P. Leach},
    title =     {{Universally Unique IDentifiers (UUIDs)}},
    pagetotal = 46,
    year =      2024,
    month =     may,
    abstract =  {This specification defines UUIDs (Universally Unique IDentifiers) -- also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform Resource Name namespace for UUIDs. A UUID is 128 bits long and is intended to guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System (NCS), later in the Open Software Foundation's (OSF's) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms. This specification is derived from the OSF DCE specification with the kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have been incorporated into this document. This document obsoletes RFC 4122.},
}

@conference{RT-Mongo,
    author={Remo Andreoli and Tommaso Cucinotta and Dino Pedreschi},
    title={RT-MongoDB: A NoSQL Database with Differentiated Performance},
    booktitle={Proceedings of the 11th International Conference on Cloud Computing and Services Science - CLOSER},
    year={2021},
    pages={77-86},
    publisher={SciTePress},
    organization={INSTICC},
    doi={10.5220/0010452400770086},
    isbn={978-989-758-510-4},
    issn={2184-5042},
}

@article{Andreoli2023,
    doi = {10.1109/tcc.2023.3292031},
    url = {https://doi.org/10.1109%2Ftcc.2023.3292031},
    year = 2023,
    publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
    pages = {1--14},
    author = {Remo Andreoli and Tommaso Cucinotta and Daniel Bristot De Oliveira},
    title = {Priority-Driven Differentiated Performance for {NoSQL} Database-As-a-Service},
    journal = {{IEEE} Transactions on Cloud Computing}
}

@article{Mongo,
    author       = {William Schultz and Siyuan Zhou and Stavros Tripakis},
    title        = {Design and Verification of a Logless Dynamic Reconfiguration Protocol in MongoDB Replication},
    journal      = {CoRR},
    volume       = {abs/2102.11960},
    year         = {2021},
    url          = {https://arxiv.org/abs/2102.11960},
    eprinttype    = {arXiv},
    eprint       = {2102.11960},
    timestamp    = {Tue, 02 Mar 2021 12:11:01 +0100},
    biburl       = {https://dblp.org/rec/journals/corr/abs-2102-11960.bib},
    bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Cassandra,
    author = {Lakshman, Avinash and Malik, Prashant},
    title = {Cassandra: a decentralized structured storage system},
    year = {2010},
    issue_date = {April 2010},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {44},
    number = {2},
    issn = {0163-5980},
    url = {https://doi.org/10.1145/1773912.1773922},
    doi = {10.1145/1773912.1773922},
    abstract = {Cassandra is a distributed storage system for managing very large amounts of structured data spread out across many commodity servers, while providing highly available service with no single point of failure. Cassandra aims to run on top of an infrastructure of hundreds of nodes (possibly spread across different data centers). At this scale, small and large components fail continuously. The way Cassandra manages the persistent state in the face of these failures drives the reliability and scalability of the software systems relying on this service. While in many ways Cassandra resembles a database and shares many design and implementation strategies therewith, Cassandra does not support a full relational data model; instead, it provides clients with a simple data model that supports dynamic control over data layout and format. Cassandra system was designed to run on cheap commodity hardware and handle high write throughput while not sacrificing read efficiency.},
    journal = {SIGOPS Oper. Syst. Rev.},
    month = apr,
    pages = {35–40},
    numpages = {6}
}

@inproceedings{QUIC,
    author = {Langley, Adam and Riddoch, Alistair and Wilk, Alyssa and Vicente, Antonio and Krasic, Charles and Zhang, Dan and Yang, Fan and Kouranov, Fedor and Swett, Ian and Iyengar, Janardhan and Bailey, Jeff and Dorfman, Jeremy and Roskind, Jim and Kulik, Joanna and Westin, Patrik and Tenneti, Raman and Shade, Robbie and Hamilton, Ryan and Vasiliev, Victor and Chang, Wan-Teh and Shi, Zhongyi},
    title = {The QUIC Transport Protocol: Design and Internet-Scale Deployment},
    year = {2017},
    isbn = {9781450346535},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3098822.3098842},
    doi = {10.1145/3098822.3098842},
    abstract = {We present our experience with QUIC, an encrypted, multiplexed, and low-latency transport protocol designed from the ground up to improve transport performance for HTTPS traffic and to enable rapid deployment and continued evolution of transport mechanisms. QUIC has been globally deployed at Google on thousands of servers and is used to serve traffic to a range of clients including a widely-used web browser (Chrome) and a popular mobile video streaming app (YouTube). We estimate that 7\% of Internet traffic is now QUIC. We describe our motivations for developing a new transport, the principles that guided our design, the Internet-scale process that we used to perform iterative experiments on QUIC, performance improvements seen by our various services, and our experience deploying QUIC globally. We also share lessons about transport design and the Internet ecosystem that we learned from our deployment.},
    booktitle = {Proceedings of the Conference of the ACM Special Interest Group on Data Communication},
    pages = {183–196},
    numpages = {14},
    location = {Los Angeles, CA, USA},
    series = {SIGCOMM '17}
}
