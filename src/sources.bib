@online{DynamoDB,
    author = "Giuseppe DeCandia, Deniz Hastorun, ...",
    title = "Dynamo: amazon's highly available key-value store",
    url = "https://dl.acm.org/doi/10.1145/1294261.1294281",
    urldate = {2025-07-14},
}

%@unknown{STEA2003,
%    author = {Lenzini, Luciano and Mingozzi, Enzo and Stea, Giovanni},
%    year = {2003},
%    month = {01},
%    pages = {},
%    title = {Full exploitation of the Deficit Round-Robin capabilities by efficient implementation and parameter tuning}
%}
%
%@incollection{BIONDI2,
%    title = {{AXI}-{REALM}: {A} {Lightweight} and {Modular} {Interconnect} {Extension} for {Traffic} {Regulation} and {Monitoring} of {Heterogeneous} {Real}-{Time} {SoCs}},
%    shorttitle = {{AXI}-{REALM}},
%    url = {https://www.iris.sssup.it/handle/11382/571875?mode=simple},
%    abstract = {7},
%    language = {eng},
%    urldate = {2025-02-16},
%    publisher = {USA},
%    author = {Benz, Thomas and Ottaviano, Alessandro and Balas, Robert and Garofalo, Angelo and Restuccia, Francesco and Biondi, Alessandro and Benini, Luca},
%    year = {2024},
%    doi = {10.23919/date58400.2024.10546511},
%}
%
%@article{BIONDI1,
%    title = {Is {Your} {Bus} {Arbiter} {Really} {Fair}? {Restoring} {Fairness} in {AXI} {Interconnects} for {FPGA} {SoCs}},
%    volume = {18},
%    issn = {1539-9087},
%    shorttitle = {Is {Your} {Bus} {Arbiter} {Really} {Fair}?},
%    url = {https://dl.acm.org/doi/10.1145/3358183},
%    doi = {10.1145/3358183},
%    abstract = {AMBA AXI is a popular bus protocol that is widely adopted as the medium to exchange data in field-programmable gate array system-on-chips (FPGA SoCs). The AXI protocol does not specify how conflicting transactions are arbitrated and hence the design of bus arbiters is left to the vendors that adopt AXI. Typically, a round-robin arbitration is implemented to ensure a fair access to the bus by the master nodes, as for the popular SoCs by Xilinx.This paper addresses a critical issue that can arise when adopting the AXI protocol under round-robin arbitration; specifically, in the presence of bus transactions with heterogeneous burst sizes. First, it is shown that a completely unfair bandwidth distribution can be achieved under some configurations, making possible to arbitrarily decrease the bus bandwidth of a target master node. This issue poses serious performance, safety, and security concerns. Second, a low-latency (one clock cycle) module named AXI burst equalizer (ABE) is proposed to restore fairness. Our investigations and proposals are supported by implementations and tests upon three modern SoCs. Experimental results are reported to confirm the existence of the issue and assess the effectiveness of the ABE with bus traffic generators and hardware accelerators from the Xilinx's IP library.},
%    number = {5s},
%    urldate = {2025-02-16},
%    journal = {ACM Trans. Embed. Comput. Syst.},
%    author = {Restuccia, Francesco and Pagani, Marco and Biondi, Alessandro and Marinoni, Mauro and Buttazzo, Giorgio},
%    month = oct,
%    year = {2019},
%    pages = {51:1--51:22},
%}
%
%@article{STEA2007,
%    title = {Performance analysis of {Modified} {Deficit} {Round} {Robin} schedulers},
%    volume = {16},
%    copyright = {https://journals.sagepub.com/page/policies/text-and-data-mining-license},
%    issn = {0926-6801, 1875-8940},
%    url = {https://journals.sagepub.com/doi/10.3233/HSN-2007-325},
%    doi = {10.3233/HSN-2007-325},
%    abstract = {Deficit Round Robin (DRR) is a scheduling algorithm which provides fair queuing at O(1) complexity. However, due to its round robin structure, its latency properties are not adequate for latency-critical applications, such as voice. For this reason, router manufacturers implement variants of the DRR algorithm which guarantee lower latencies to one (or a subset of) queue(s). In this paper we evaluate the performance of two such variants, both of which are known as Modified Deficit Round Robin, currently implemented in commercial routers. The comparison is carried out analytically, by deriving the latency and bandwidth guarantees of both algorithms, and by simulation.},
%    language = {en},
%    number = {4},
%    urldate = {2025-02-16},
%    journal = {Journal of High Speed Networks},
%    author = {Lenzini, Luciano and Mingozzi, Enzo and Stea, Giovanni},
%    month = nov,
%    year = {2007},
%    pages = {399--422},
%}
%
%@article{DRR0,
%    author = {Shreedhar, M. and Varghese, George},
%    title = {Efficient fair queueing using deficit round-robin},
%    year = {1996},
%    issue_date = {June 1996},
%    publisher = {IEEE Press},
%    volume = {4},
%    number = {3},
%    issn = {1063-6692},
%    journal = {IEEE/ACM Trans. Netw.},
%    month = jun,
%    pages = {375â€“385},
%    numpages = {11}
%}
%
%@inproceedings{DRR1,
%    title = {Deficit {Round} {Robin} with network calculus},
%    url = {https://ieeexplore.ieee.org/document/6376315},
%    doi = {10.4108/valuetools.2012.250202},
%    abstract = {Generalised Processor Sharing (GPS) is a wellknown ideal service policy designed to share the capacity of a server among the input flows fairly: each backlogged flow receives a pre-defined fraction of the total server capacity, according to its weight. Several practical implementations of GPS have been proposed, among which Deficit Round Robin (DRR) is widely deployed since it can be implemented in a very efficient way. The worst-case performance of DRR has been studied by several papers, all of which assume that the shared server has a constant rate. This paper studies DRR using Network Calculus, under very general assumptions. Latency results that generalise all the previous works are derived, and a residual service is derived from DRR parameters. This residual service is shown to be as good as or even better than previous studies when restricting it to the same assumptions.},
%    urldate = {2025-02-16},
%    booktitle = {6th {International} {ICST} {Conference} on {Performance} {Evaluation} {Methodologies} and {Tools}},
%    author = {Boyer, Marc and Stea, Giovanni and Sofack, William Mangoua},
%    month = oct,
%    year = {2012},
%    keywords = {Servers},
%    pages = {138--147},
%}
%
%@inproceedings{DRR2,
%    title = {Deficit {Round}-{Robin}: {A} {Second} {Network} {Calculus} {Analysis}},
%    shorttitle = {Deficit {Round}-{Robin}},
%    url = {https://ieeexplore.ieee.org/document/9470448/},
%    doi = {10.1109/RTAS52030.2021.00022},
%    abstract = {Deficit Round-Robin (DRR) is a widespread scheduling algorithm that provides fair queueing with variable-length packets. Bounds on worst-case delays obtained with DRR were found by Boyer et al. They used a rigorous network calculus approach and characterized the service obtained by one flow of interest by means of a strict service curve. These bounds do not make any assumptions on the interfering traffic flows hence are pessimistic when the interfering traffic is constrained by some arrival curves. For such cases, Soni et al. improved the worstcase delay bounds by a correction term that accounts for arrival curve constraints of interfering traffic, using a semi-rigorous approach. Unfortunately, these latter bounds are incorrect, as we show by exhibiting a counter-example. Then we derive new service curves for DRR, which are rigorously proven, and we account for arrival curve constraints of interfering traffic. Hence, the resulting delay bounds are guaranteed to be correct. Furthermore, we find numerically that they are smaller than the incorrect ones obtained with the method of Soni et al. These bounds also improve on the results by Boyer et al. when there is no constraint on interfering traffic. Therefore, as of today, they are the best known delay bounds for DRR. Our results are obtained by applying the method of the pseudo-inverse.},
%    urldate = {2025-02-16},
%    booktitle = {2021 {IEEE} 27th {Real}-{Time} and {Embedded} {Technology} and {Applications} {Symposium} ({RTAS})},
%    author = {Tabatabaee, Seyed Mohammadhossein and Boudec, Jean-Yves Le},
%    month = may,
%    year = {2021},
%    note = {ISSN: 2642-7346},
%    keywords = {Scheduling algorithms, Aggregates, Calculus, Real-time systems, Delays, Mathematical model},
%    pages = {171--183},
%}
%
%@inproceedings{SRR2,
%    title = {Evaluation of surplus round robin scheduling algorithm},
%    url = {https://www.semanticscholar.org/paper/Evaluation-of-surplus-round-robin-scheduling-Nikolova-Blondia/03827c9ac06199219efa50cecc7b9c0c582d2310},
%    abstract = {In multi-service packet networks the packet scheduling algorithm plays a key role in delivering guaranteed service to different flows. In this article we evaluate surplus round robin (SRR) scheduling algorithm. We apply the Latency-Rate (LR) servers theory in order to obtain bounds on the latency and delay provided by the algorithm. We compare the performance characteristics of SRR with the popular deficit round robin (DRR) algorithm to conclude that SRR can provide better performance than DRR.},
%    urldate = {2025-02-16},
%    author = {Nikolova, D. and Blondia, C.},
%    month = dec,
%    year = {2006},
%}
%
%@inproceedings{SRR1,
%    address = {New York, NY, USA},
%    series = {{SIGCOMM} '96},
%    title = {A reliable and scalable striping protocol},
%    isbn = {9780897917902},
%    url = {https://dl.acm.org/doi/10.1145/248156.248169},
%    doi = {10.1145/248156.248169},
%    abstract = {Link striping algorithms are often used to overcome transmission bottlenecks in computer networks. Traditional striping algorithms suffer from two major disadvantages. They provide inadequate load sharing in the presence of variable length packets, and may result in non-FIFO delivery of data. We describe a new family of link striping algorithms that solves both problems. Our scheme applies to any layer that can provide multiple FIFO channels.We deal with variable sized packets by showing how fair queuing algorithms can be transformed into load sharing algorithms. Our transformation results in practical load sharing protocols, and shows a theoretical connection between two seemingly different problems. The same transformation can be applied to obtain load sharing protocols for links with different capacities. We deal with the FIFO requirement for two separate cases. If a sequence number can be added to each packet, we show how to speed up packet processing by letting the receiver simulate the sender algorithm. If no header can be added, we show how to provide quasi-FIFO delivery. Quasi-FIFO is FIFO except during occasional periods of loss of synchronization. We argue that quasi-FIFO is adequate for most applications. We also describe a simple technique for speedy restoration of synchronization in the event of loss.We develop an architectural framework for transparently embedding our protocol at the network level by striping IP packets across multiple physical interfaces. The resulting strIPe protocol has been implemented within the NetBSD kernel. Our measurements and simulations show that the protocol offers scalable throughput even when striping is done over dissimilar links, and that the protocol synchronizes quickly after packet loss. Measurements show performance improvements over conventional round robin striping schemes and striping schemes that do not resequence packets.},
%    urldate = {2025-02-16},
%    booktitle = {Conference proceedings on {Applications}, technologies, architectures, and protocols for computer communications},
%    publisher = {Association for Computing Machinery},
%    author = {Adiseshu, Hari and Parulkar, Guru and Varghese, George},
%    month = aug,
%    year = {1996},
%    pages = {131--141},
%}
%
%@article{OVER2,
%    author = {Behnam, Moris and Nolte, Thomas and Sjodin, Mikael and Shin, Insik},
%    journal = {IEEE Transactions on Industrial Informatics},
%    title = {Overrun Methods and Resource Holding Times for Hierarchical Scheduling of Semi-Independent Real-Time Systems},
%    year = {2010},
%    volume = {6},
%    number = {1},
%    pages = {93-104},
%    keywords = {Real time systems;Job shop scheduling;Resource management;Algorithm design and analysis;Scheduling algorithm;Independent component analysis;Embedded software;Software systems;Process design;Operating systems;Hierarchical scheduling;operating system;real-time systems;scheduling;resource sharing;synchronization},
%    doi = {10.1109/TII.2009.2037918}
%}
%
%@inproceedings{OVER1,
%    author = {Behnam, Moris and Nolte, Thomas and Asberg, Mikael and Bril, Reinder J.},
%    booktitle = {2009 15th IEEE International Conference on Embedded and Real-Time Computing Systems and Applications},
%    title = {Overrun and Skipping in Hierarchically Scheduled Real-Time Systems},
%    year = {2009},
%    volume = {},
%    number = {},
%    pages = {519-526},
%    keywords = {Real time systems;Resource management;Processor scheduling;Access protocols;Computer applications;Embedded computing;Timing;Testing;Assembly;Interference;Real time systems;Hierarchical scheduling;synchronization protocols},
%    doi = {10.1109/RTCSA.2009.62}
%}
